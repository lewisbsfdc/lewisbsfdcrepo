<apex:page showHeader="true" sidebar="true" controller="GoogleAddressController">
<apex:includeLightning />
<html>
  <head>
    <title>Place Autocomplete Address Form</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <meta charset="utf-8"/>

    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500"/>
    <style>
      #locationField, #controls {
        position: relative;
        width: 480px;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
      }
      .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
        font-family: "Roboto";
      }
      #address {
        border: 1px solid #000090;
        background-color: #f0f9ff;
        width: 480px;
        padding-right: 2px;
      }
      #address td {
        font-size: 10pt;
      }
      .field {
        width: 99%;
      }
      .slimField {
        width: 80px;
      }
      .wideField {
        width: 200px;
      }
      #locationField {
        height: 20px;
        margin-bottom: 2px;
      }
    </style>
  </head>

  <body>
    <div id="locationField">
      <input id="autocomplete"
             placeholder="Enter your address"
             onFocus="geolocate()"
             type="text"/>
    </div>

    <!-- Note: The address components in this sample are typical. You might need to adjust them for
               the locations relevant to your app. For more information, see
         https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
    -->

    <table id="address">
      <tr>
        <td class="label">Street address</td>
        <td class="slimField"><input class="field" id="street_number" disabled="true" value="{!streetNumber}"/></td>
        <td class="wideField" colspan="2"><input class="field" id="route" disabled="true"/></td>
      </tr>
      <tr>
        <td class="label">City</td>
        <td class="wideField" colspan="3"><input class="field" id="locality" disabled="true"/></td>
      </tr>
      <tr>
        <td class="label">State</td>
        <td class="slimField"><input class="field" id="administrative_area_level_1" disabled="true"/></td>
        <td class="label">Zip code</td>
        <td class="wideField"><input class="field" id="postal_code" disabled="true"/></td>
      </tr>
      <tr>
        <td class="label">Country</td>
        <td class="wideField" colspan="3"><input class="field" id="country" disabled="true"/></td>
      </tr>
    </table>


    <style>
      ui-menu-item {
        background-color: white;
      }
      li {
        background-color: white;
      }
      ul {
        background-color: white;
      }
    </style>

    <form autocomplete="false">
      <div class="ui-widget">
        <label for="userInputAddressForAutocomplete">Address: </label>
        <input type="text" 
          onkeyup="addressAutocompleteOnChange()"
          
          id="userInputAddressForAutocomplete"/>
      </div>
    </form>



<!-- 
    <div style="background-color:grey" id="addressAutocompleteResults">
      Empty...
    </div>

    <div style="background-color:orange" id="addressList">
      Empty...
    </div> -->

<!--     <div id="addresses" style="background-color:grey">
      <input id="addressList"
             placeholder="Enter your address"
             
             type="text"/>
    </div> -->



<script>
// This sample uses the Autocomplete widget to help the user select a
// place, then it retrieves the address components associated with that
// place, and then it populates the form fields with those details.
// This sample requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script
// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var placeSearch, autocomplete;
var myMap ;

var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();
  //myMap = new Map();
  console.log('myMap Before', myMap);


  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }
  myMap = new Map();
  // { "name":"John", "age":30, "city":"New York"}

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {

      var val = place.address_components[i][componentForm[addressType]];

      
      //myMap = myMap + addressType + '|' + val + '|';
      myMap.set(addressType, val);
      console.log('val', val);
      document.getElementById(addressType).value = val;
    }    
  }
  console.log('componentForm', componentForm);
  console.log('myMap', myMap);

var myJson = {};
myJson = mapToObj(myMap);
var json = JSON.stringify(myJson);
console.log('json', json);
  //console.log('stringify', JSON.stringify(myMap) );

//var myJson = {};
//myJson.myMap = myMap;
//myJson.myString = myString;
//var json = JSON.stringify(myMap);

//console.log('json' , json);
  //assignVariable(json);
 // document.getElementById('hdnField').value = 'From fillInAddress';
}




// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  }
}

function mapToObj(map){
  const obj = {}
  for (let [k,v] of map)
    obj[k] = v
  return obj
}

function clickMe() {
            methodOneInJavascript('INVOKED!');
        }

    </script> 

<script type="text/javascript">
var addresses;
// function addressAutocompleteOnChange() {
//  console.log('called js function');

//  // Get user address input
//  var addressElement = $('#userInputAddressForAutocomplete');
//  if (!addressElement) {
//    return;
//  }

//  var addressForAutocomplete = addressElement.val();
//  if (addressForAutocomplete == '' 
//       || addressForAutocomplete == undefined
//       || addressForAutocomplete == null) {
//    return;
//  }

//  // TODO: Get geolocation from browser
//  var addressLatitude = 40.8437777;
//  var addressLongitutde = -73.1136284;

//  // Execute remote action
//  GoogleAddressController.addressAutoComplete(
//    addressLatitude,
//    addressLongitutde,
//    addressForAutocomplete,
//    callbackFn
//  );
 
//  function callbackFn(response, event) {
//    if (event.type === 'exception' || !response) {
//      console.log('Autocomplete RA failed');
//      return;
//    }
//    //console.log('response', String(response));
//    var response1 = JSON.parse(response.replace(/(&quot\;)/g,"\""));
//    console.log('repsonse.replace', response.replace(/(&quot\;)/g,"\""));
//    // Update results
//    //var autocompleteResults = JSON.stringify(response1);
//    //console.log('autocompleteResults', autocompleteResults);
//    //var predictions = autocompleteResults.predictions;
//    var predictions = response1.predictions;
//    console.log('predictions', predictions);
//    var addresses = [];
//    var addressesList = [];
//   if (predictions.length > 0) {
//       console.log('in predictions');
//       for (var i = 0; i < predictions.length; i++) {
//           addresses.push(
//               {
//                   main_text: predictions[i].structured_formatting.main_text, 
//                   secondary_text: predictions[i].structured_formatting.secondary_text,
//                   place_id: predictions[i].place_id
//               });
//           var text1 = predictions[i].structured_formatting.main_text + ' ' 
//                       predictions[i].structured_formatting.secondary_text + '<br>'
//           addressesList.push(text1);
          
//       }
//   }
//    var autocompleteResultsElement = $('#addressAutocompleteResults');
//    var addressList = $('#addressList');
   
//    if (!autocompleteResultsElement) {
//      return;
//    }


//    $( "#userInputAddressForAutocomplete" ).autocomplete({
//       minLength: 0,
//       source: function(request, response) {
//         var displayResults = [];

//         if (addresses) {
//           for (var i=0; i<addresses.length; i++) {
//             displayResults.push(addresses[i].main_text + ' ' + addresses[i].secondary_text);
//           }
//         }

//         response(displayResults);
//       }
//    });



//    autocompleteResultsElement.text(JSON.stringify(addresses));
//    addressList.text(addressesList);
//  }
// }

function addressAutocompleteOnChange() {
 console.log('In: addressAutocompleteOnChange');

 // TODO: Potentially clear current results incase no callback is returned

 // Get user address input
 var addressElement = $('#userInputAddressForAutocomplete');
 if (!addressElement) {
   return;
 }
 console.log('addressElement', addressElement);
 
 var addressForAutocomplete = addressElement.val();
 console.log('addressForAutocomplete', addressForAutocomplete);
 if (addressForAutocomplete == '' 
      || addressForAutocomplete == undefined
      || addressForAutocomplete == null) {
   return;
 }

 // TODO: Get geolocation from browser
 var addressLatitude = 40.8437777;
 var addressLongitutde = -73.1136284;

 // Execute remote action
 GoogleAddressController.addressAutoComplete(
   addressLatitude,
   addressLongitutde,
   addressForAutocomplete,
   callbackFn
 );
 
 function callbackFn(response, event) {
   console.log('In: callbackFn');
   if (event.type === 'exception' || !response) {
     console.log('Autocomplete RA failed');
     return;
   }

   // Convert string response into usable object
   // --- TODO: JSON.deserialize to a custom class on the controller side
   var responseObject = JSON.parse(response.replace(/(&quot\;)/g,"\""));
   addresses = responseObject.predictions;
   //console.log('addresses', addresses);
   $("#userInputAddressForAutocomplete" ).autocomplete({
      minLength: 0,
      source: function(request, response) {
        var displayResults = [];
        
        if (addresses) {
          for (var i=0; i<addresses.length; i++) {
            displayResults.push({label: addresses[i].description, value: i});
          }
        }
        console.log('displayResults',displayResults)
        response(displayResults);
      },
      select: function( event, ui ) {
        // Not working for now..
        console.log('ui.item.value', ui.item.value);
        var selected = addresses[ui.item.value];
        console.log('selected', selected);
        console.log('addresses=[0]', addresses[0]);
        console.log('addresses=[1]', addresses[1]);
        //console.log('addresses[selected]', addresses[selected]);

        if (ui &&  ui.item) {
          alert('Label: ' + ui.item.label + '\nValue: ' + ui.item.value);
        }
      }
   });
 }

}


</script>

<apex:includeScript value="/lightning/lightning.out.js" />

    <div id="lightning" />
<button type="button" onclick="callLightningEvent();">Call Lightning Code From VF</button>
<!--
    <script>
      window.onload = function() {
               $Lightning.use("c:LightningOutExampleApp", function() {               
              var comapp=$Lightning.createComponent("c:LightningOutExample", 
              {},             
              "lightning",
              function(component) {
                console.log('Lightning out ->Component has been loaded.');
                $A.eventService.addHandler({ "event": "c:lightningAppExternalEvent", "handler" : myFunctionFromVisualforce });                
              });              
            });            
        }

        function callLightningEvent(){
            var lightningEvent = $A.get("e.c:lightningAppEvent");
            console.log('LE called');
            lightningEvent.setParams({'data':{'TestDataKey':'TestDataValue'}});
            lightningEvent.fire();
        }

        function myFunctionFromVisualforce (event){
            console.log('This message is from visualforce function');
            console.log('Data which is coming from lightning component',event.getParam('data'));
            debugger;
        }
  
    </script>
-->

    <script>
      window.onload = function() {
               $Lightning.use("c:GoogleAddressApp", function() {               
              var comapp=$Lightning.createComponent("c:GoogleCitySearch", 
              {},             
              "lightning",
              function(component) {
                console.log('Lightning out ->Component has been loaded.');
                
              });              
            });            
        }
</script>

<!--     <script>
        $Lightning.use("c:GoogleAddressApp", function() {
          $Lightning.createComponent("GoogleCitySearch",
              {label : "" },
              "lightning",
              function(cmp) {
                console.log("LC on Page");
                // do some stuff
              }
          );
        });
    </script> -->
<br/>
    <!-- Address:
<div id="lightningToVF">
    <input  id="input-2a" name="location1"  type="text"/>
</div> -->
<script>



</script>
<!--     <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJpqM1gX8A3tzRBb13op5ci9tiZOJZWeY&libraries=places&callback=initAutocomplete"
        async defer></script> -->


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJpqM1gX8A3tzRBb13op5ci9tiZOJZWeY&signed_in=true&libraries=places&callback=initAutocomplete"></script>

<!-- https://laracasts.com/discuss/channels/javascript/protecting-google-maps-javascript-api-key -->
<!-- https://calderaforms.com/doc/create-google-maps-api-key/ -->
<!-- http://hellosnl.blogspot.com/2017/09/salesforce-lightning-google-places-autocomplete-predictions-search.html -->
<!-- http://michaelsoriano.com/lightning-component-google-places/ -->


<apex:includeScript value="{!$Resource.jquery_min_js}"/>
<apex:includeScript value="https://code.jquery.com/jquery-1.12.4.js"/>
<apex:includeScript value="https://code.jquery.com/ui/1.12.1/jquery-ui.js"/>

<!-- <apex:includeScript value="{!$Resource.GoogleAddress2}"/> -->

     
<!-- <apex:includeScript value="{!$Resource.GoogleMaps_js}"/> -->



<!-- Code from Salesforce community -->
<!-- <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script> -->
<!-- <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script> -->

    <apex:form >

        <apex:actionFunction action="{! setVariable}" name="assignVariable" rerender="showValue">
            <apex:param name="myParam" assignTo="{!s2}" value=""/>
        </apex:actionFunction>

    </apex:form>





  </body>
</html>
</apex:page>